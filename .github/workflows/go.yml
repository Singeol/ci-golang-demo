name: Go

on: [push]

env:
  REGISTRY: cr.yandex
  IMAGE_NAME: ${{ github.repository }}

jobs:

  # lint:
  #   runs-on: yandex-runner
  #   steps:
  #   - name: checkout source code
  #     uses: actions/checkout@v4

  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: '1.20'

  #   - name: Install golint
  #     run: go install golang.org/x/lint/golint

  #   - name: Lint
  #     id: lint
  #     run: make lint

  # test:
  #   runs-on: yandex-runner
  #   steps:
  #   - name: checkout source code
  #     uses: actions/checkout@v4

  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: '1.20'

  #   - name: Test
  #     run: make test

  
  build-and-push-image:
    if: github.event_name == 'push'
    # needs: ["lint", "test"]
    runs-on: yandex-runner
    permissions:
      contents: read
      packages: write
    steps:
      - name: checkout source code
        uses: actions/checkout@v4
      # - name: Set env
      #   run: |
      #     echo "AWS_ACCESS_KEY_ID=${{ secrets.RUNNER_ACCESS_KEY_ID }}" >> $GITHUB_ENV \
      #       && echo "AWS_SECRET_ACCESS_KEY=${{ secrets.RUNNER_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
      - name: Setup Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: json_key
          password: ${{ secrets.YANDEX_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.YANDEX_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=staging-{{sha}}-{{date 'YYYYMMDDHHmmss'}},enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=qa-{{sha}}-{{date 'YYYYMMDDHHmmss'}},enable=${{ startsWith(github.ref, 'refs/heads/release/v') || github.ref == 'refs/heads/master' }}
            type=raw,value={{tag}},event=tag
      # If none of above set default tag
      - name: Set tag 
        id: set_tag
        run: |
          if [ -z "${{ steps.meta.outputs.tags }}" ]; then
            TAG="${{ secrets.YANDEX_REGISTRY }}/${{ env.IMAGE_NAME }}/temp-${GITHUB_SHA::8}-$(date +%s)"
          else
            TAG="${{ steps.meta.outputs.tags }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          provenance: false
          push: false
          pull: true
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          # Cache to yandex container registry
          cache-from: type=registry,ref=${{ secrets.YANDEX_REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,mode=max,ref=${{ secrets.YANDEX_REGISTRY }}/${{ env.IMAGE_NAME }}:cache,oci-mediatypes=true,image-manifest=true
          # Cache to yandex s3 storage
          # cache-from: type=s3,region=${{ vars.RUNNER_REGION }},bucket=${{ vars.RUNNER_BUCKET_NAME }},endpoint_url=${{ vars.RUNNER_ENDPOINT }}
          # cache-to: type=s3,mode=max,region=${{ vars.RUNNER_REGION }},bucket=${{ vars.RUNNER_BUCKET_NAME }},endpoint_url=${{ vars.RUNNER_ENDPOINT }}
          tags: ${{ steps.set_tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
      # - name: Scan image
      #   id: scan_container
      #   uses: anchore/scan-action@v2
      #   with:
      #     image: ${{ steps.meta.outputs.tags }}
      #     grype-version: 0.15.0
      #     severity-cutoff: critical
      #     fail-build: false
      #     acs-report-enable: true   
  
